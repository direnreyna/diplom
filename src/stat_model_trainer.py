# src/stat_model_trainer.py

import joblib
import numpy as np
from typing import Any, Union, Tuple
from scipy.sparse import csr_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score, hamming_loss, jaccard_score
from sklearn.model_selection import train_test_split

class StatisticalModelTrainer:
    def __init__(self, model=None):
        if model is None:
            model = OneVsRestClassifier(LogisticRegression(solver='lbfgs', max_iter=500))
            # –†–∞–Ω–¥–æ–º —Ñ–æ—Ä–µ—Å—Ç
            # model = MultiOutputClassifier(RandomForestClassifier(n_estimators=100))
        self.model = model

    def train(self, X_train: Any, y_train: Any) -> None:
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å"""
        print("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        self.model.fit(X_train, y_train)

    def evaluate(self, X_test: Any, y_test: Any, target_names=None) -> dict:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏"""
        #y_pred = self.model.predict(X_test)

        y_proba = self.model.predict_proba(X_test)
        preds_binary = (y_proba > 0.3).astype(int)
        y_pred = preds_binary

        # Hamming Loss ‚Äî –¥–æ–ª—è –Ω–µ–≤–µ—Ä–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        print(f"Hamming loss: {hamming_loss(y_test, y_pred):.4f}")

        # Jaccard Score ‚Äî –º–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        print(f"Jaccard score (samples): {jaccard_score(y_test, y_pred, average='samples'):.4f}")

        # Classification report (–ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ)
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø–ª–æ—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞
            y_test_dense = y_test.toarray()
        except:
            y_test_dense = y_test

        print("\nClassification Report:")
        print(classification_report(y_test_dense, y_pred, target_names=target_names))

        return self._generate_report(y_test, y_pred)
    


    def _generate_report(self, y_true: Any, y_pred: Any) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º"""
        report_str = classification_report(y_true, y_pred)  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç (str)
        report_dict = classification_report(y_true, y_pred, output_dict=True)  # –°–ª–æ–≤–∞—Ä—å
        
        print(report_str)  # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω
        return report_dict  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ dict

    def save(self, path: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –¥–∏—Å–∫"""
        joblib.dump(self.model, path)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {path}")

    def load(self, path: str) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞"""
        self.model = joblib.load(path)
        print(f"üì• –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {path}")