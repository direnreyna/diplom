# src/stat_model_trainer.py

import joblib
import numpy as np
from typing import Any, Union, Tuple, Dict
from scipy.sparse import csr_matrix
from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.metrics import classification_report, precision_score, recall_score, f1_score, hamming_loss, jaccard_score
from sklearn.model_selection import train_test_split
from .config import VECTORIZER, MLB, STAT_MODEL, STAT_MODEL_PATH

class StatisticalModelTrainer:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç: —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞, –±–∏–Ω–∞—Ä–∏–∑–∞—Ç–æ—Ä –º–µ—Ç–æ–∫
        """
        self.vectorizer = TfidfVectorizer(
            max_features=10000,
            ngram_range=(1, 2),
            lowercase=True
        )
        self.mlb = MultiLabelBinarizer()
        self.model = OneVsRestClassifier(LogisticRegression(solver='lbfgs', max_iter=500))

    def vectorize_dataset(self, X, y) -> Tuple:
        """
        –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞

        :param raw_data: –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä–∏ X –∏ y
        :param mode: 'stat' ‚Äî –¥–ª—è —Å—Ç–∞—Ç–º–æ–¥–µ–ª–∏, 'bert' ‚Äî –¥–ª—è RuBERT
        :return: (X_tfidf, y_binary), —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤, —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫
        """
        # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤
        X_vec = self.vectorizer.fit_transform(X)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ—Ç–æ–∫
        if isinstance(y, np.ndarray) and len(y.shape) == 2:
            print("–ú–µ—Ç–∫–∏ —É–∂–µ –±–∏–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω—ã ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞—é fit_transform")
            y_bin = y
        else:
            print("–î–µ–ª–∞—é –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–∫...")
            y_bin = self.mlb.fit_transform(y)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º vectorizer –∏ mlb
        joblib.dump(self.vectorizer, VECTORIZER)
        joblib.dump(self.mlb, MLB)
        print("üíæ vectorizer –∏ mlb —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'model'")

        return X_vec, y_bin

    def train(self, X_train: Any, y_train: Any) -> Any:
        """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å"""
        print("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        self.model.fit(X_train, y_train)

    def evaluate(self, X_test: Any, y_test: Any, threshold: float = 0.3) -> Union [str, Dict]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏"""
        #y_pred = self.model.predict(X_test)

        y_proba = self.model.predict_proba(X_test)
        preds_binary = (y_proba > threshold).astype(int)
        y_pred = preds_binary

        # Hamming Loss ‚Äî –¥–æ–ª—è –Ω–µ–≤–µ—Ä–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        print(f"Hamming loss: {hamming_loss(y_test, y_pred):.4f}")

        # Jaccard Score ‚Äî –º–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        print(f"Jaccard score (samples): {jaccard_score(y_test, y_pred, average='samples'):.4f}")

        # Classification report (–ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ)
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø–ª–æ—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞
            y_test_dense = y_test.toarray()
        except:
            y_test_dense = y_test

        print("\nClassification Report:")
        print(classification_report(y_test_dense, y_pred, target_names=self.mlb.classes_))

        return self._generate_report(y_test, y_pred)
    
    def _generate_report(self, y_true: Any, y_pred: Any) -> Union [str, Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º"""
        report_str = classification_report(y_true, y_pred)  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç (str)
        report_dict = classification_report(y_true, y_pred, output_dict=True)  # –°–ª–æ–≤–∞—Ä—å
        
        print(report_str)  # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω
        return report_dict  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ dict

    def save(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–∞ –¥–∏—Å–∫"""
        joblib.dump(self.model, STAT_MODEL)
        joblib.dump(self.vectorizer, VECTORIZER)
        joblib.dump(self.mlb, MLB)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {STAT_MODEL_PATH}")

    def load(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞"""
        self.model = joblib.load(STAT_MODEL)
        self.vectorizer = joblib.load(VECTORIZER)
        self.mlb = joblib.load(MLB)
        print(f"üì• –ú–æ–¥–µ–ª—å –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {STAT_MODEL_PATH}")